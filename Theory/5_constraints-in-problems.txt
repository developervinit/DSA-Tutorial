//Here we are learning about the constraint which were given in the DSA problem.

//This is a link to have more clear understanding:-
//https://www.youtube.com/watch?v=3etzME4DNXg&t=1301s

//What are constraints in the DSA problem?
//Ans - Constrains are given with DSA problem to have idea that what size of input which time complexity is suitable. If you are not aware of that you are simply left guessing and trying out various solution of various time complexities on problems, it means you will waste your time thinking of a solutions whose time complexity will be greater then required and that will be sure to get timed out (TLE - Time Limit Exceed). 
//By looking at the constraints of a problem, we can often "guess" the solution.

//In simple words:- So what we can conclude is that the constraints always help you to plan which data structure/algorithm is to be followed to solve a computing problem .


//Lets understand it by two examples with low and high constraints:- 

//Ex1:- When the problem has low constraints. 

  -First we have to understand the fact that a cpu/computing-machine can do 10^8 operations in one second.

  -Then suppose we have some problem like "sort a list of given number" and this problem has certain constraint which is described below.

    //constraint
    1 <= N <= 1000

    //Explained above constraints:-
    N -> N is an input value
    1 -> 1 is an Minimum input value (algorithm accepts at least 1 input it means n has to at leas 1)
    1000 -> 1000 is Maximum input value (algorithm can't accept more then 1000 input it means n can not be more then 1000).
    so we can say that above constraint equation "1 <= N <= 1000" has to be true like "1 <= 1 <= 1000" or "1 <= 1000 <= 1000" and can not be "1 <= 0 <= 1000" and "1 <= 1001 <= 1000"

  -So here even if you use an algorithm "bubble sort" whose time complexity is O(n^2) for sorting the given number then it would work without an problem. The reason being that a computing-machine can do up to 10^8 computations per second. it means that input is 1000 into algorithm which use "bubble sort" logic then its time complexity will be Of(n^2) which is something like O(f(1000^2)) which becomes O(f(1000000)) and cpu's computational power is 10^8 which is 100000000 so it means cpu can execute this algorithm with in the time limit and we will not get TLE. 
  
  //Explained why time limit will not exceed when we use bubble sort:-
  1. We know that computer does 10^8 computations per second it means 100000000 computation per second.
  2. And bubble sort has time complexity n^2. and n is the input of algorithm here.
  3. and maximum value of input can be 1000 as per the constraints, so when we put 1000 into n so it becomes n=1000.
  4. so according the bubble sort time complexity n^2 we get 1000^2 means 1000 * 1000 which become 1000000 operations done by the algorithm.
  5. then question raise in our mind that how did we get 1000000 operation by algorithm. so bubble sort has n^2 time complexity means it has nested loop solution in which outer loop will run to length of n which is 1000 here and inner loop will also run to the length of n which is also 1000 so it means total operations become 1000000 operations.
  6. then we compare number of operations which are 1000000 done by the algorithm with number of operations which are 100000000 by the computer. so here we can clearly see that bubble sort's operations does not exceed the computer's operation it means we can use O(n^2) approach to solve the problem.


//Ex2:- When the problem has very high constraints. 

  So the problem is same like example-1 "sort a list of given number" and this problem has certain constraint which is described below. So in such a case your mind should come up with solution in which complexity is O(log n) instead of O(n) and O(n^2). because even O(n) would time out explained below.

  //constraint
    1 <= N <= 10^18

    //Explained above constraints:-
    N -> N is an input value
    1 -> 1 is an Minimum input value (algorithm accepts at least 1 input)
    10^18 -> 10^18 is Maximum input value (algorithm can't accept more then 10^18 input)

  -So here we can not use bubble sort because its time complexity is O(n^2) and even we can not use algorithm whose time complexity is O(n) because as we know when n=10^18 and we put it into O(n) like O(10^18) and we put it into O(n^2) like O(10^18+2) then the algorithms' number of operations exceeds the computer's number of operations which is 10^8 per second. it means we can not use algorithms whose time complexities are O(n) and O(n^2). So we need an algorithm whose time complexity is O(log n).

NOTE:- Suppose in a problem , if you think that solution for a problem is O(n^2) / any other polynomial complexity , then here Dynamic programming can help you to optimize the solution.


//So here below we have "Common time complexities" table to have idea that what size of input suitable for which time complexity:-

  Let n be the main variable in the problem.

  If n ≤ 12, the time complexity can be O(n!). (n factorial)
  If n ≤ 25, the time complexity can be O(2n).
  If n ≤ 100, the time complexity can be O(n^4).
  If n ≤ 500, the time complexity can be O(n^3).
  If n ≤ 104, the time complexity can be O(n^2).
  If n ≤ 106, the time complexity can be O(n log n).
  If n ≤ 108, the time complexity can be O(n).
  If n > 108, the time complexity can be O(log n) or O(1).

//---------------------

  Examples of each common time complexity

  O(n!) [Factorial time]: Permutations of 1 ... n
  O(2n) [Exponential time]: Exhaust all subsets of an array of size n
  O(n^3) [Cubic time]: Exhaust all triangles with side length less than n
  O(n^2) [Quadratic time]: Slow comparison-based sorting (eg. Bubble Sort, Insertion Sort, Selection Sort)
  O(n log n) [Linearithmic time]: Fast comparison-based sorting (eg. Merge Sort)
  O(n) [Linear time]: Linear Search (Finding maximum/minimum element in a 1D array), Counting Sort
  O(log n) [Logarithmic time]: Binary Search, finding GCD (Greatest Common Divisor) using Euclidean Algorithm
  O(1) [Constant time]: Calculation (eg. Solving linear equations in one unknown)



NOTE:- If some algorithm has n^2 complexity it means that whatever number of input passing into the algorithm will be multiplied by itself and then algorithm will do that much operations such as if we pass 1000 input in algorithm whose complexity is n^2 then n=1000 and then 1000^2 it means 1000 * 1000 which becomes 1000000 so we can assume that, that algorithm is accepting 1000000 input or we can say that, that algorithm is performing 1000000 operations.


//More explanation with example:--------------------------------------------


//There is a problem  "minimum bribe" on hacker rank that has "constraint" and "subtask" part which we are going to understand step by step. 

These are the given constraint and subtask:-

//Constraints:-
 1<=t<=10, 
 1<=n<=10^5. 

//Subtasks:-
 for 60% score 1<=n<=10^3, 
 for 100% score 1<=n<=10^5.

//Constraints Explanation:- 
"1<=t<=10" This means there will be at most 10 test cases (or inputs) to consider. The variable "t" typically denotes the number of test cases.

"1<=n<=10^5" Here, "n" represents the size of the input. The minimum value for "n" is 1, and the maximum value is 10^5 (which is 100,000).

//Subtasks Explanation:-
It is Partial Scoring Mechanism: Many competitive programming problems reward partial points for solving smaller cases. If your solution is efficient for "n≤1000" but not for "n≤100,000" you still earn 60% of the total points.
Let's understand it:-
--So when we have input range "1<=n<=10^3" then maximum input will be 1000 then the algorithms with O(n^2) time-complexity might be acceptable because O(n^2) => O(1000^2) => 1000000 which is manageable within typical time limits (10^8) of cpu. However, 
--when we have input range "1<=n<=10^5" then maximum input will be 100000 then the algorithms with O(n^2) time-complexity is not feasible because time-complexity is O(n^2) then becomes O(100000^2) => 10000000000 operations which exceeds the typical time limits (10^8) of cpu.
so If you're pressed for time, you can aim to solve the smaller constraint first to secure 60% of the points. Later, optimize your algorithm for larger inputs (n≤10^5) to achieve the full score.

For 60% score: This indicates the range of values for "n" that need to be considered to achieve 60% of the total score for the problem. In this case, "n" should be within the range. 1<=n<=10^3 (1 to 1000).

For 100% score: To get the full score for the problem, participants need to handle the larger input size efficiently. Therefore, the solution needs to work for the entire range specified in the constraints, which is 1<=n<=10^5 (1 to 100,000).

Now, let's explain it step by step:

-The constraints specify the limitations on the input size. For t, there can be at most 10 test cases to handle, and for each test case, the input size n can vary.
-The solution needs to handle inputs efficiently within these constraints. The larger constraint (1<=n<=10^5) requires an efficient algorithm to handle a larger input size up to 100,000. so our algorithms' time complexity should not be O(n^2) but it can be O(n), O(log n), O(n).

More Explanation:-
For each test case, the input size n can go up to 100,000.
Since n is large, the algorithm must be efficient. Quadratic time complexity O(n^2) is generally infeasible for this size because: O(n^2) for n=100,000 would result in 10^10 operations, which is computationally expensive and would likely exceed time limits.
Linear O(n), logarithmic O(log n), or constant O(1) time complexities are preferred.

-Subtasks define variations in the problem's requirements. In this case:
 --To get 60% of the total score, the solution should be able to handle smaller inputs efficiently within the range 1<=n<=10^3 (1 to 1000).
 --To achieve the full 100% score, the solution must handle larger inputs efficiently up to 10^5 (100,000).
 
In summary, participants need to develop an algorithm that efficiently solves the minimum bribe problem for different input sizes. They should aim to create a solution that works for both smaller input sizes (subtask 1) and larger input sizes (subtask 2) to maximize their score in the programming contest.
