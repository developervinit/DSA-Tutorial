Question 1 - What is algorithm?
Answer - Algorithm refers to a SEQUENCE OF FINITE STEPS to solve a particular problem. Algorithms can be SIMPLE and COMPLEX depending on what you want to achieve. Algorithms are always LANGUAGE-INDEPENDENT, i.e. they are just plain INSTRUCTIONS that can be implemented in any language, and yet the output will be the same, as expected.

Question 2 - What are the Characteristics of an Algorithm?
Answer - Algorithm has 6 characteristics.
a) - Clear and Unambiguous: The algorithm should be clear and unambiguous. Each of its steps should be clear in all aspects and must lead to only one meaning.
b) - Well-Defined Inputs: If an algorithm says to take inputs, it should be well-defined inputs. 
c) - Well-Defined Outputs: The algorithm must clearly define what output will be yielded and it should be well-defined as well. 
d) - Finite-ness: The algorithm must be finite, i.e. it should terminate after a finite time.
e) - Feasible: The algorithm must be simple, generic, and practical, such that it can be executed with the available resources. It must not contain some future technology or anything.
f) - Language Independent: The Algorithm designed must be language-independent, i.e. it must be just plain instructions that can be implemented in any language, and yet the output will be the same, as expected.


Question 3 - What is Performance Analysis of an algorithm?
Answer - When there are multiple alternative algorithms to solve a problem, we evaluate each algorithm's performance based on two main METRICS: time and space. We then compare them and choose the one that best meets our requirements.

Definition - Performance analysis of an algorithm is the PROCESS of CALCULATING SPACE and TIME required by that ALGORITHM.

NOTE:- Time and space complexity are METRICS used to analyze the performance of an algorithm. 

Question 4 - What is Space Complexity of an algorithm?
Answer - Space complexity is an METRIC to analyze the performance of an algorithm. It includes program space and data space. and Space complexity is measured by the total amount of memory required by the algorithm to complete its execution.

//Explanation of Program Space and Data Space:-
-- Program Space:- This refers to the memory required to store the actual code or instructions of the algorithm. It includes:
Fixed Part: This part is constant and does not change with input size, such as the space for variable declarations, constants, and executable instructions.

-- Data Space:- This includes the memory required for storing the data that the algorithm manipulates. It can vary based on the input size and includes:
Input Space: Memory required to store the input data.
Auxiliary Space: Extra memory that is required during the execution of the algorithm for temporary computations (e.g., arrays, objects, recursion stack).

space complexity can be divided into two parts
1) CONSTANT space complexity.
2) LINEAR space complexity.

1) CONSTANT space complexity - if any algorithm needs FIXED AMOUNT OF SPACE/MEMORY for its all INPUT VALUES then that space complexity is said to be constant space complexity.
constant space complexity is denoted by O(1).

2) LINEAR space complexity - when the TOTAL AMOUNT OF MEMORY/SPACE REQUIRED by the algorithm is increased with the increase of INPUT VALUE then that complexity is said to be linear space complexity.
linear space complexity is denoted by O(n).


Question 5 - What is Time Complexity of an algorithm?
Answer - Time complexity is an METRICS used to analyze the performance of an algorithm. It includes program execution time. and time complexity is measured by the TOTAL AMOUNT OF TIME taken by the ALGORITHM to complete its execution.

NOTE - when we calculate the time complexity of an algorithm we consider only input data. example:- we only check how our algorithm behaving for the different values to perform all the operations like asthmatic, logical, return value etc. we generally don't consider processor power, 32bit machine or 64bit, read write speed.

calculating time complexity in below example:-
 function add(a, b){
    //1 unit time for "return"
    //1 unit time for asthmatic "a+b"
    return a + b;
 }

 in above algorithm 1 unit time for "return" and 1 unit time for arthmatic "a+b" then total 2 unit of time for the algorithm execution and that time is fixed.

 -Time complexity can be calculated in two ways
 1) Constant time complexity
 2) Linear time complexity

 1) Constant time complexity - when the algorithm required the FIXED AMOUNT OF TIME for completing its execution for all INPUTS then that complexity said to be constant time complexity.
 constant time complexity is denoted by O(1).

 2) Linear time complexity - when the algorithms' EXECUTION TIME increases with the increase of INPUT values then that complexity said to be linear time complexity.
 O(n).


Question 6 - What is Asymptomatic Notation?
Answer - Asymptomatic notation is the mathematical representation of the algorithm's    complexity.
In asymptomatic notation, when we want to represent the complexity of algorithm we use only the MOST SIGNIFICANT terms in the complexity of algorithm and we ignore the LEAST SIGNIFICANT term in the complexity of the algorithm (here complexity can be space or time complexity).
example - here in 5n+1, n is the most significant term and other are least significant terms.

there are three types of asymptomatic notation to give the idea of the complexity of the algorithm.
1) Big-Omega(Ω) [Big Omega notation] it represent BEST case scenario.
2) Big-Theta(θ) [Big Theta notation] it represent the AVERAGE case scenario.
3) Big-Oh(O) [Big O notation] it represent the worst case.


NOTE:- If your app needs to be very quick and has plenty of memory to work with, you don't have to worry about space complexity.

NOTE:- If you have very little memory to work with, you should pick a solution that is relatively slower but needs less space.     
 